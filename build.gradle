buildscript {

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath AndroidX.gradle
        classpath Jetbrains.gradle
        classpath Hilt.gradle
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def setAndroidModule(project) {
    project.android {
        compileSdk App.compileSkd

        defaultConfig {
            minSdk App.minSdk
            targetSdk App.targetSdk

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            consumerProguardFiles "consumer-rules.pro"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
}

def setCompose(project) {
    project.android {
        buildFeatures {
            compose true
        }

        composeOptions {
            kotlinCompilerExtensionVersion Compose.composeCompiler
        }
    }
}

def provideCompose(project) {
    project.dependencies {
        implementation(Google.material)
        implementation(Compose.material)
        implementation(Compose.animation)
        implementation(Compose.tooling)
        debugImplementation(Compose.ui_tooling)
    }
}

def provideAccompanist(project) {
    project.dependencies {
        implementation(Google.accompanistSysUiController)
    }
}

def provideCoil(project) {
    project.dependencies {
        implementation(Coil.core)
    }
}

def provideHilt(project) {
    project.dependencies {
        implementation(Hilt.library)
        implementation(Hilt.navigation)
        kapt(Hilt.compiler)
    }
}

def provideCoroutines(project) {
    project.dependencies {
        implementation(Jetbrains.coroutinesCore)
    }
}

def provideLifecycle(project) {
    project.dependencies {
        implementation(Lifecycle.viewModel)
        implementation(Lifecycle.runtime)
    }
}

def provideRetrofit(project) {
    project.dependencies {
        implementation(Retrofit.retrofit)
        implementation(Retrofit.moshiConverter)
        implementation(Retrofit.logginInterceptor)
    }
}

def provideTestTools(project) {
    project.dependencies {
        testImplementation 'junit:junit:4.+'
        androidTestImplementation 'androidx.test.ext:junit:1.1.3'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    }
}